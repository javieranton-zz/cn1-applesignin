package com.codename1.auth.apple.demos.signin;


import com.codename1.components.Accordion;
import com.codename1.components.SpanLabel;
import com.codename1.components.ToastBar;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.Preferences;
import com.codename1.social.AppleLogin;
import com.codename1.social.LoginCallback;
import com.codename1.ui.Button;
import com.codename1.ui.CN;
import static com.codename1.ui.ComponentSelector.$;
import com.codename1.ui.Container;
import com.codename1.ui.TextArea;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.FlowLayout;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class AppleSigninDemo {
    
    /** ------------- BEGIN OAUTH2 SETTINGS ---------------- */
    /**
     * The following are only needed for OAuth2 auth.  We use OAuth2 for platforms
     * other than iOS.  iOS uses Native signin which doesn't require any special configuration
     * settings.
     */
    
    /**
     * OAuth2 Settings:
     * 
     * OAuth2 requires
     *   1. AppleClientID
     *   2. AppleRedirectURI
     *   3. One of:
     *       a. AppleClientSecret
     *       b. AppleClientSecretURL
     *       c. AppleKeyID, AppleTeamID, AND ApplePrivateKey
     */
    
    // OAuth2 Client ID.  Obtain from Apple Developer console
    public static String AppleClientID = "ca.weblite.signindemosvc";
    
    // OAuth2 redirect URL, where Apple redirects after successful login.
    // IMPORANT: Apple uses HTTP POST form data to pass the OAuth2 code to this redirect
    // URL, which is not compatible with Codename One's OAuth2 implementation.  Your redirect
    // page needs to extract the code provided, and redirect back to itself using GET parameters
    // so that Codename One's Oauth component can detect it.
    // The following is a simple PHP Script that you can use for the redirect page that 
    // will extract all POST form data and convert them to a GET query:
    /*
    <?php
    header('Cache-Control: no-cache');
    if ($_POST) {
            //echo "<!doctype html>\n<html><body>Thank you!</body></html>";
            header('Location: '.$_SERVER['PHP_SELF'].'?'.http_build_query($_POST));
    } else {
            echo "<!doctype html>\n<html><body>Thank you</body></html>";
    }
    */
    public static String AppleRedirectURI = "https://weblite.ca/cn1tests/signindemo";
    
    /**
     * OAuth2 Client Secret Considerations:
     * 
     * Apple works differently than other OAuth2 login providers in that they require
     * you to generate your own client secret as a JWT (JSON Web Token).  You have 3 options here:
     * 
     * 1. You can generate it yourself, as described here: https://developer.apple.com/documentation/signinwithapplerestapi/generate_and_validate_tokens
     *    or for better, 3rd party instructions, here: https://developer.okta.com/blog/2019/06/04/what-the-heck-is-sign-in-with-apple 
     * 2. Generate the token dynamically at runtime.  The AppleLogin class will do this form you
     *    if you provide the following 3 parameters:
     *     i.   ApplePrivateKey - A private key that you generate in the Apple Developer console.
     *     ii.  AppleKeyID - The Key ID of this private key.  (Shown in developer console).
     *     iii. AppleTeamID - Your Team ID.
     * 3. Create a web service that generates the token dynamically.  The Web Service should return a JSON
     *    object in the following form:
     *    {"client_secret" : "xxxxxxx"}
     *    Then provide the URL for this web service in the AppleClientSecretURL parameter.
     */
    
    // Private Key.  Can be obtained from Apple Developer console.
    public static String ApplePrivateKey = "-----BEGIN PRIVATE KEY-----\n" +
        "MIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHkwdwIBAQQg2Pv8N3waHrH6WU5a\n" +
        "87SA17FZpLtZYXFYfTnMwBiZ5Z+gCgYIKoZIzj0DAQehRANCAATECgHrChq5ccqj\n" +
        "2sKF8BmJEKgHefk5ueM02dCrp4A/Y/5E9J84sE5e1ScJbasH3zuk2C09eGyQFyf2\n" +
        "wT6tSjSz\n" +
        "-----END PRIVATE KEY-----";
    
    // Key ID.  Can be obtained from Apple Developer console
    public static String AppleKeyID = "9K48F5P6SW";
    
    // Team ID.  The code at the beginning of your app's bundle ID.
    public static String AppleTeamID = "HRNMHC7527";
    
    // Client secret was generated using instructions from https://developer.okta.com/blog/2019/06/04/what-the-heck-is-sign-in-with-apple 
    public static String AppleClientSecret = "eyJraWQiOiIiLCJhbGciOiJFUzI1NiJ9.eyJpc3MiOiIiLCJpYXQiOjE1NzUzOTM1MjIsImV4cCI6MTU5MDk0NTUyMiwiYXVkIjoiaHR0cHM6Ly9hcHBsZWlkLmFwcGxlLmNvbSIsInN1YiI6IiJ9.NoxRRw8M-t6QA10mbscRWq8bCeRt3LA5Qcp2y_TEa59ExAzZgwlRLZOY5c3XO44vvh5tZQRSG06OT7C1L_ls1A";
    
    // Client secret URL to a web service that will generate the client secret.
    // Should return json like {"client_secret" : "xxxx"}
    public static String AppleClientSecretURL = null;
    
    /** ------------- END OAUTH2 SETTINGS ---------------- */
    
    private Form current;
    private Resources theme;
    
    
    private void showSettings() {
        
    }

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if(err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });        
    }
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        loadDefaults();
        showFirstForm();
    }

    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }
    
    AppleLogin login = new AppleLogin();
    {
        login.setClientId(AppleClientID);
        //login.setClientSecret(AppleClientSecret);
        login.setRedirectURI(AppleRedirectURI);
        login.setKeyId(AppleKeyID);
        login.setTeamId(AppleTeamID);
        login.setPrivateKey(ApplePrivateKey);
        
    }
    
    private String nullify(String str) {
        return isEmpty(str) ? null : str;
    }
    
    private void updateAppleLogin() {
        login.setClientId(nullify(AppleClientID));
        login.setClientSecret(nullify(AppleClientSecret));
        login.setClientSecretUrl(nullify(AppleClientSecretURL));
        login.setPrivateKey(nullify(ApplePrivateKey));
        login.setKeyId(nullify(AppleKeyID));
        login.setTeamId(nullify(AppleTeamID));
        login.setRedirectURI(nullify(AppleRedirectURI));
        
    }
    
    class LoginForm extends Form {
        LoginForm() {
            super(BoxLayout.y());
            $(getContentPane()).setPaddingMillimeters(3f, 0, 0, 0);
            add(FlowLayout.encloseCenter(new Label(AppleLogin.createAppleLogo(0x0, 15f))));
            
            
            Button loginBtn = new Button("Sign in with Apple");
            AppleLogin.decorateLoginButton(loginBtn, 0x0, 0xffffff);
                    
            loginBtn.addActionListener(evt->{
                updateAppleLogin();
                login.doLogin(new LoginCallback() {
                    @Override
                    public void loginFailed(String errorMessage) {
                        System.out.println("Login failed");
                        ToastBar.showErrorMessage(errorMessage);
                    }

                    @Override
                    public void loginSuccessful() {
                        new MainForm().show();
                    }
                });
            });
            
            add(FlowLayout.encloseCenter(loginBtn));
            
            
        }
    }
    
    class MainForm extends Form {
        MainForm() {
            super(BoxLayout.y());
            add(new SpanLabel("You are now logged in as "+login.getEmail()));
            Button logout = new Button("Logout from Apple");
            logout.addActionListener(e->{
                login.doLogout();
                new LoginForm().show();
            });
            add(logout);
        }
    }
    
    private String stringify(String val) {
        return val == null ? "" : val;
    }
    
    class SettingsForm extends Form {
        private TextField clientId = new TextField(stringify(AppleClientID)), 
                redirectURI = new TextField(stringify(AppleRedirectURI)), 
                keyID = new TextField(stringify(AppleKeyID)), 
                teamID = new TextField(stringify(AppleTeamID));
        private TextArea privateKey = new TextArea(stringify(ApplePrivateKey)), 
                clientSecret = new TextArea(stringify(AppleClientSecret)), 
                clientSecretURL = new TextArea(stringify(AppleClientSecretURL));
        private Form backForm = CN.getCurrentForm();
        
        SettingsForm() {
            initUI();
        }
        
        
        private void initUI() {
            setLayout(BoxLayout.y());
            add(new Label("Oauth2 Settings"));
            add(new SpanLabel("The following parameters are for use in non-iOS platforms.  On iOS, you don't need any special parameters for Sign-in with Apple to work."));            
            addAll(new Label("Client ID"), clientId);
            addAll(new Label("Redirect URI"), redirectURI);
                    
            Accordion accordion = new Accordion();
            
            Container clientSecretCnt = new Container(BoxLayout.y());
            clientSecretCnt.add(new SpanLabel("Use this field only if you are pre-generating the client secret."));
            clientSecretCnt.add(clientSecret);
            
            accordion.addContent("Client Secret", clientSecretCnt);
            
            Container clientSecretUrlCnt = new Container(BoxLayout.y());
            clientSecretUrlCnt.add(new SpanLabel("Use this field only if you are using a web service to generate your client secret."));
            clientSecretUrlCnt.add(new Label("Client Secret URL:"));
            clientSecretUrlCnt.add(clientSecretURL);
            clientSecretUrlCnt.add(new SpanLabel("The web service should return a JSON object with a single property: client_secret"));
            accordion.addContent("Client Secret Web Service", clientSecretUrlCnt);
            
            Container genCnt = new Container(BoxLayout.y());
            genCnt.add(new SpanLabel("Use the following fields if you wish to generate the client secret JWT on the fly.  All of these values can be obtained from your Apple Developer account."));
            genCnt.add(new Label("Key ID")).add(keyID)
                    .add(new Label("Team ID")).add(teamID)
                    .add(new Label("Private Key")).add(privateKey);
            accordion.addContent("Generate Client Secret at Runtime", genCnt);
            add(accordion);
            
            Button save = new Button("Save");
            Button cancel = new Button("Cancel");
            save.addActionListener(e->{
                AppleClientID = clientId.getText();
                AppleKeyID = keyID.getText();
                AppleTeamID = teamID.getText();
                ApplePrivateKey = privateKey.getText();
                AppleClientSecret = clientSecret.getText();
                AppleRedirectURI = redirectURI.getText();
                AppleClientSecretURL = clientSecretURL.getText();
                
                Preferences.set("AppleClientID", AppleClientID);
                Preferences.set("AppleKeyID", AppleKeyID);
                Preferences.set("AppleTeamID", AppleTeamID);
                Preferences.set("ApplePrivateKey", ApplePrivateKey);
                Preferences.set("AppleClientSecret", AppleClientSecret);
                Preferences.set("AppleRedirectURI", AppleRedirectURI);
                Preferences.set("AppleClientSecretURL", AppleClientSecretURL);
                
                if (backForm != null) {
                    backForm.showBack();
                } else {
                    new LoginForm().show();
                }
                
            });
            
            cancel.addActionListener(e->{
                if (backForm != null) {
                    backForm.showBack();
                } else {
                    new LoginForm().show();
                }
            });
            add(FlowLayout.encloseCenter(cancel, save));
        
        }
        
        
    }
    
    private static void loadDefaults() {
        AppleClientID = Preferences.get("AppleClientID", null);
        AppleKeyID = Preferences.get("AppleKeyID", null);
        AppleTeamID = Preferences.get("AppleTeamID", null);
        ApplePrivateKey = Preferences.get("ApplePrivateKey", null);
        AppleClientSecret = Preferences.get("AppleClientSecret", null);
        AppleRedirectURI = Preferences.get("AppleRedirectURI", null);
        AppleClientSecretURL = Preferences.get("AppleClientSecretURL", null);
    }
    
    private boolean isEmpty(String val) {
        return val == null || val.isEmpty();
    }
    
    private void showFirstForm() {
        if (!CN.isSimulator() && "ios".equals(CN.getPlatformName())) {
            if (login.isUserLoggedIn()) {
                new MainForm().show();
            } else {
                new LoginForm().show();
            }
        } else {
            boolean showSettings = false;
            if (isEmpty(AppleClientID)) {
                showSettings = true;
            }
            if (isEmpty(AppleClientSecret) && (isEmpty(AppleKeyID) || isEmpty(AppleTeamID) || isEmpty(ApplePrivateKey)) && isEmpty(AppleClientSecretURL)) {
                showSettings = true;
            }
            if (isEmpty(AppleRedirectURI)) {
                showSettings = true;
            }
            
            if (showSettings) {
                new SettingsForm().show();
            } else {
                if (login.isUserLoggedIn()) {
                    new MainForm().show(); 
                } else {
                    new LoginForm().show();
                }
            }
        }
    }
}
